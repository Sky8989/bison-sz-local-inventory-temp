<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace可以写类的全限定名，这样做的好处是
　　sqlSession.insert(Student.class.getName()+".addStudent");
-->
<mapper namespace="com.bison.inventory.mapper.mybatis.ShenZhenLocalOutInBoundInventroyMapperEx">


    <insert id="insert" parameterType="com.bison.inventory.pojo.ShenZhenLocalOutInBoundInventroy">
        INSERT INTO `bison_amz_product_inventory`.`sz_local_out_in_bound_inventroy`
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="autoId != null">
                auto_id,
            </if>
            <if test="transactionType != null">
                transaction_type,
            </if>
            <if test="outInBoundDate != null">
                out_in_bound_date,
            </if>
            <if test="outInBoundTypeId != null">
                out_in_bound_type_id,
            </if>
            <if test="certificateTypeId != null">
                certificate_type_id,
            </if>
            <if test="sku != null">
                sku,
            </if>
            <if test="receiptDate != null">
                receipt_date,
            </if>

            <if test="deliveryNoteNumber != null">
                delivery_note_number,
            </if>

            <if test="sendCheckNumber != null">
                send_check_number,
            </if>
            <if test="certificateNumber != null">
                certificate_number,
            </if>
            <if test="productId != null">
                product_id,
            </if>

            <if test="supplierAbbreviation != null">
                supplier_abbreviation,
            </if>

            <if test="inventoryType != null">
                inventory_type,
            </if>

            <if test="inBoundQuantity != null">
                in_bound_quantity,
            </if>

            <if test="outBoundQuantity != null">
                out_bound_quantity,
            </if>

            <if test="moveInBoundQuantity != null">
                move_in_bound_quantity,
            </if>

            <if test="moveOutBoundQuantity != null">
                move_out_bound_quantity,
            </if>

            <if test="remarks != null">
                remarks,
            </if>

        </trim>

        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="autoId != null">
                #{autoId,jdbcType=INTEGER},
            </if>
            <if test="transactionType != null">
                #{transactionType,jdbcType=INTEGER},
            </if>
            <if test="outInBoundDate != null">
                #{outInBoundDate},
            </if>
            <if test="outInBoundTypeId != null">
                #{outInBoundTypeId,jdbcType=INTEGER},
            </if>
            <if test="certificateTypeId != null">
                #{certificateTypeId,jdbcType=INTEGER},
            </if>
            <if test="sku != null">
                #{sku},
            </if>
            <if test="receiptDate != null">
                #{receiptDate},
            </if>

            <if test="deliveryNoteNumber != null">
                #{deliveryNoteNumber},
            </if>

            <if test="sendCheckNumber != null">
                #{sendCheckNumber},
            </if>

            <if test="certificateNumber != null">
                #{certificateNumber},
            </if>

            <if test="productId != null">
                #{productId},
            </if>

            <if test="supplierAbbreviation != null">
                #{supplierAbbreviation},
            </if>

            <if test="inventoryType != null">
                #{inventoryType},
            </if>
            <if test="inBoundQuantity != null">
                #{inBoundQuantity},
            </if>
            <if test="outBoundQuantity != null">
                #{outBoundQuantity},
            </if>

            <if test="moveInBoundQuantity != null">
                #{moveInBoundQuantity},
            </if>

            <if test="moveOutBoundQuantity != null">
                #{moveOutBoundQuantity},
            </if>

            <if test="remarks != null">
                #{remarks},
            </if>


        </trim>

        ON DUPLICATE KEY UPDATE
        product_id=VALUES(product_id),
        sku=VALUES(sku),
        inventory_type=VALUES(inventory_type),
        supplier_abbreviation=VALUES(supplier_abbreviation),
        out_in_bound_date=VALUES(out_in_bound_date),
        in_bound_quantity = values(in_bound_quantity),
        move_in_bound_quantity = values(move_in_bound_quantity),
        move_out_bound_quantity = values(move_out_bound_quantity),
        out_bound_quantity = values(out_bound_quantity)

    </insert>
    <select id="findShenZhenLocalINventoryTempList"
            resultType="com.bison.inventory.pojo.AmzShenZhenLocalInventroyTemp">


        select
            l.product_id as productId,
            if(l.upc is null,0,l.upc) + if(r.upc is null,0,r.upc)  as upcQuantity,
            if(l.fnsku is null,0,l.fnsku) + if(r.fnsku is null,0,r.fnsku)   as fnskuQuantity
         from
        (
            SELECT
                t1.product_id,
                t1.upc,
                t2.fnsku
            FROM
                (SELECT
                    product_id,
                        (SUM(in_bound_quantity) + SUM(move_in_bound_quantity)) - (SUM(out_bound_quantity) + SUM(move_out_bound_quantity)) upc
                FROM
                    bison_amz_product_inventory.sz_local_out_in_bound_inventroy
                WHERE
                    transaction_type = 1

                        AND inventory_type = 'UPC'
                GROUP BY product_id
                HAVING product_id > 0) t1
                    inner JOIN
                (SELECT
                    product_id,
                        (SUM(in_bound_quantity) + SUM(move_in_bound_quantity)) - (SUM(out_bound_quantity) + SUM(move_out_bound_quantity)) AS fnsku
                FROM
                    bison_amz_product_inventory.sz_local_out_in_bound_inventroy
                WHERE
                    transaction_type = 1
                        AND inventory_type NOT IN ('速卖通' , 'B2B', '品牌部', '海外仓', '不良品仓')
                        AND inventory_type LIKE '%(%)%'
                GROUP BY product_id
                HAVING product_id > 0) t2 ON t1.product_id = t2.product_id
        ) l

        left join

        (
            SELECT
                t1.product_id,
                t1.upc,
                t2.fnsku
            FROM
                (SELECT
                    product_id,
                        (SUM(in_bound_quantity) + SUM(move_in_bound_quantity)) - (SUM(out_bound_quantity) + SUM(move_out_bound_quantity)) upc
                FROM
                    bison_amz_product_inventory.sz_local_out_in_bound_inventroy
                WHERE
                    transaction_type = 2

                        AND inventory_type = 'UPC'
                GROUP BY product_id
                HAVING product_id > 0) t1
                    inner JOIN
                (SELECT
                    product_id,
                        (SUM(in_bound_quantity) + SUM(move_in_bound_quantity)) - (SUM(out_bound_quantity) + SUM(move_out_bound_quantity)) AS fnsku
                FROM
                    bison_amz_product_inventory.sz_local_out_in_bound_inventroy
                WHERE
                    transaction_type = 2
                        AND inventory_type NOT IN ('速卖通' , 'B2B', '品牌部', '海外仓', '不良品仓')
                        AND inventory_type LIKE '%(%)%'
                GROUP BY product_id
                HAVING product_id > 0) t2 ON t1.product_id = t2.product_id
        )r

        on l.product_id = r.product_id

    </select>
    <select id="findProductIdList" resultType="java.lang.Integer">

    SELECT
        product_id
    FROM
        bison_amz_product_inventory.sz_local_out_in_bound_inventroy
    WHERE
        product_id > 0
    GROUP BY product_id

    </select>
</mapper>